#include<stdio.h>
#include<string.h>
#include<ctype.h>
#include<windows.h>
enum { BLACK=0, BLUE, GREEN, CYAN, RED, MAGENTA, BROWN, LIGHTGRAY,
        DARKGRAY, LIGHTBLUE, LIGHTGREEN, LIGHTCYAN, LIGHTRED, LIGHTMAGENTA, YELLOW, WHITE, };
static short __BACKGROUND = 0;
static short __FOREGROUND = 0;
void textbackground(short color) {
	__BACKGROUND = color;
	HANDLE hOut = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(hOut, __FOREGROUND + (color << 4));
}
void textcolor(short color) {
	__FOREGROUND = color;
	HANDLE hOut = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(hOut, color + (__BACKGROUND << 4));
}
void gotoxy(short c, short r) {
	if (c>0 && r>0) {
		COORD CursorPosition = { c-1, r-1 };
		HANDLE hOut = GetStdHandle(STD_OUTPUT_HANDLE);
		SetConsoleCursorPosition(hOut, CursorPosition);
	}
}
char * spazi(char * str)    // togliere eventuali spazi da una stringa
{
	int k, l=0;
	for(k=0; str[k]!='\0'; k++){
	    if(!isblank(str[k]) && !ispunct(str[k]) && !isdigit(str[k])){
	        str[k]=toupper(str[k]);
	        str[l++]=str[k];
	    }
    }
	str[l]='\0';
	return str;
}
void lineette_tabella(unsigned len)           //visualizza riga di lineette tabella        
{
	unsigned k;
	for(k=0; k<len-1; k++){
		textcolor(YELLOW);
		printf("  -  ");
	}
}
int main()
{
	char str[100+1], str2[100+1];
	unsigned t;
		textcolor(CYAN);
		textbackground(WHITE);
	printf("INSERISCI UNA SINGOLA PAROLA COME CHIAVE CRITTOGRAFICA:\n");
		textcolor(LIGHTGRAY);
		textbackground(0);
	fgets(str, sizeof(str), stdin);
		textcolor(CYAN);
		textbackground(WHITE);
	printf("INSERISCI IL MESSAGGIO DA CRITTOGRAFARE:\n");
		textcolor(WHITE);
		textbackground(0);
	fgets(str2, sizeof(str2), stdin);
		textcolor(CYAN);
		textbackground(WHITE);
	printf("TIPOLOGIE DI ESERCIZI A DISPOSIZIONE(1-2):\n");
		textcolor(WHITE);
		textbackground(0);
	scanf("%u", &t);
	spazi(str);              // eliminare spazi, segni, numeri, lettere tutte maiuscole
	int len=strlen(str);
	int cont[26], i, k, pos[100+1], j;
	for(i=0; i<26; i++)        
	    cont[i]=i;           // alla variabile cont[i] assegno il valore della propria posizione, i
	i=0;
	j=1;
	while(i<26){
		for(k=0; str[k]!='\0'; k++){
			if(cont[i]==str[k]-'A'){    
	       		pos[k]=j;      // assegno alla varibile pos, nella posizione k, un valore che corrisponde all'ordine alfabetico del carattere nella stringa str,
	       		j++;           // cioÃ¨ nella parola chiave; k corrisponde alla posizione del carattere nella stringa str
	       }
		}
		i++;
	}
		textcolor(CYAN);
		textbackground(WHITE);
	printf("NUMERI CORRISPONDENTI:\n");       //visualizza numeri corrispondenti
		textbackground(0);
	for(k=0; k<len-1; k++){
		if(k<len-2){
			textcolor(LIGHTMAGENTA);
			printf("%u-", pos[k]);
		}
		else{
			textcolor(LIGHTMAGENTA);
			printf("%u", pos[k]);
		}
	}
	printf("\n");
		textcolor(CYAN);
		textbackground(WHITE);
	printf("TABELLA:\n\n");                 //visualizza lettere parola tabella
		textbackground(0);
	for(k=0; str[k]!='\0'; k++)
	    printf("  %c  ", str[k]);
	printf("\n");
	
	spazi(str);
	lineette_tabella(len);                 //visualizza riga di lineette tabella
	printf("\n");
	
	for(k=0; k<len-1; k++){                  //visualizza numeri corrispondenti tabella
		if(pos[k]<10)
	   		printf("  %u  ", pos[k]);
	   	else
	      	printf("  %u ", pos[k]);
	}
	printf("\n");
	lineette_tabella(len);                   //visualizza riga di lineette tabella
	printf("\n");
	spazi(str2);
	int len2=strlen(str2);
	int r=0, c=0;
	char matrice[100+1][100+1];
	for(k=0; str2[k]!='\0'; k++){              //visualizza messaggio in fase di crittografia tabella
		matrice[r][c]=str2[k];
		printf("  %c  ", matrice[r][c]);
		c++;
		if(c==len-1){
			printf("\n");
			c=0;
			r++;
		}
	}
	printf("\n");
	r=(len2-1)/(len-1);
	if(t==1){
		printf("LETTERE CASUALI:\n");
		textcolor(CYAN);
		for(c=(len2-1)%(len-1); c<len-1; c++){
			textcolor(RED);
			matrice[r][c]=(char) 65+rand()%26;
			printf("%c ", matrice[r][c]);
		}
	}
	printf("\n\n");
		textcolor(CYAN);
	printf("MESSAGGIO CRITTOGRAFATO: \n");
	k=r;
	j=1;
	c=0;
	while(j<len){
		if(pos[c]==j){
			for(r=0; r<=k; r++){
				printf("%c", matrice[r][c]);
			}
			j++;
			c=0;
			printf("  ");
		}
		else
			c++;
	}
	textcolor(WHITE);
}
